<%- include("../../views/partials/admin/header") %>


    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <style>
        .error-message {
            color: red;
        }


        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }


        .thumbnail {
            margin-right: 10px;


        }
    </style>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="productForm" enctype="multipart/form-data" onsubmit="submitForm(event)">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <!-- <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">


                                    <option value="">




                                    </option>


                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div> -->
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">

                                    </div>
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                    </div>
                                    <div id="color-error" class="error-message"></div>
                                </div>

                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">
                                                <%for(let i=0;i<cat.length;i++){%>



                                                    <option value="<%=cat[i].name%>">
                                                        <%=cat[i].name%>
                                                    </option>

                                                    <%}%>

                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView1">
                                        <input class="form-control" type="file" name="images" id="input1"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage1(event), viewImage(event, 1)">
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView2">


                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage2(event),viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView3">


                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage3(event),viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView4">



                                        <input class="form-control" type="file" name="images" id="input4"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage4(event),viewImage(event, 4)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                            </div>
                    </div>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script>

        async function submitForm(event) {
            console.log("submitform")
            event.preventDefault();

            if (validateForm()) {
                console.log('validated');/////////////////////////////////////


                const formData = new FormData(document.getElementById('productForm'))
             

                try {
                    const response = await fetch('/admin/addProducts', {
                        method: 'POST',
                        body: formData,
                    });
                    // Check if the response is ok (status 200)
                    // Optionally, handle the response (e.g., show a success message)
                    const result = await response.json(); // assuming your server returns JSON
                    location.href=result.redirectTo;
                    



                } catch (error) {
                    console.error("Request failed", error);
                }
            } else {
                console.log("catched here")
                console.log("Form validation failed");
            }
        }


///////////image adding and setting cropper

        function viewImage1(event) {
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
            console.log('in  view image 1');////////////////////////////////////

        }
        function viewImage2(event) {
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }
        function viewImage3(event) {
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }
        function viewImage4(event) {
            document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage(event, index) {
            console.log('in view image function');////////////////////////////////////
            let input = event.target;
            console.log(input)
            let reader = new FileReader();
            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById('imgView' + index);
                image.src = dataURL;
                let cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true
                });
                console.log('just before cropper parentNode');/////////////////////////////////
                let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                cropperContainer.style.display = 'block';

                let saveButton = document.querySelector('#saveButton' + index);
                saveButton.addEventListener('click', async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    let croppedImage = document.getElementById('croppedImg' + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 0.8);

                    
                    
                    await croppedCanvas.toBlob((blob) => {
                        
                        let timestamp = new Date().getTime();
                        let fileName = `cropped-img-${timestamp}-${index}.png`;
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, blob)
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files;

                    });

                    cropperContainer.style.display = 'none';
                    cropper.destroy();
                });
            };
            reader.readAsDataURL(input.files[0]);
        }

        const selectedImages = [];
      

        document.getElementById('input1').addEventListener('change', handleFileSelect);

        function handleFileSelect(event) {
    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
    const addedImagesContainer = document.getElementById('addedImagesContainer');
    addedImagesContainer.innerHTML = ''; // Clear the thumbnails container
    const files = event.target.files;

    selectedImages.length = 0; // Reset selected images to avoid stale data

    for (let i = 0; i < files.length; i++) {
        const file = files[i];

        // Validate file type
        if (!allowedTypes.includes(file.type)) {
            alert(`Invalid file type: ${file.name}. Only PNG, JPEG, and JPG are allowed.`);
            event.target.value = ''; // Clear the file input
            return; // Stop further processing
        }

        // If valid, add the file to the list
        selectedImages.push(file);

        // Create a thumbnail for the valid file
        const thumbnail = document.createElement('div');
        thumbnail.classList.add('thumbnail');

        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.alt = 'thumbnail';
        img.style.width = '50px';
        img.style.height = 'auto';

        // Add a remove button for each thumbnail
        const removeIcon = document.createElement('span');
        removeIcon.classList.add('remove-icon');
        removeIcon.innerHTML = '&times;';
        removeIcon.addEventListener('click', function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1); // Remove the file from the selected list
            }
            thumbnail.remove(); // Remove the thumbnail
        });

        // Append thumbnail and remove button
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}


        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName('productName')[0].value;
            const description = document.getElementById('descriptionid').value;
            // const brand = document.getElementsByName('brand')[0].value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const color = document.getElementsByName('color')[0].value;
            const category = document.getElementsByName('category')[0].value;
            const images = document.getElementById('input1')
            const quantity = document.getElementsByName('quantity');
            let isValid = true
            if (name.trim() === "") {
    displayErrorMessage('productName-error', 'Please enter a product name.');
    isValid = false;
} else if (!/^[a-zA-Z0-9\s'’-]+$/.test(name.trim())) {
    displayErrorMessage('productName-error', 'Product name can only contain letters, numbers, spaces, hyphens, and apostrophes.');
    isValid = false;
}

if (description.trim() === "") {
    displayErrorMessage('description-error', 'Please enter a product description.');
    isValid = false;
} else if (!/^[a-zA-Z0-9\s,.\-’'"]+$/u.test(description.trim())) {
    displayErrorMessage('description-error', 'Product description can only contain letters, numbers, spaces, commas, periods, hyphens, and basic punctuation.');
    isValid = false;
}




            if (parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }
            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                isValid = false;
            }

            if (color.trim() === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                isValid = false;
            }

            if (images.files.length === 0) {
                displayErrorMessage("images-error", 'Please select an image.');
                isValid = false;
            }
            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            console.log('inside display error msg');///////////////////////////
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            console.log('inside clear wrror')/////////////////////////
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
            });
            const errorMessage = document.getElementById('errorMessage');

        }

        async function submitForm(event) {
    console.log("submitform");
    event.preventDefault();

    if (validateForm()) {
        console.log('validated');

        const formData = new FormData(document.getElementById('productForm'));

        try {
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.status === 200) {
                // Trigger SweetAlert on success
                Swal.fire({
                    icon: 'success',
                    title: 'Product Added',
                    text: 'Product has been added successfully!',
                    showConfirmButton: false,
                    timer: 2000 // Closes automatically after 2 seconds
                });

                // Redirect after success
                setTimeout(() => {
                    location.href = result.redirectTo; // Redirect URL from the server response
                }, 2100); // Delay to allow the Swal popup to show
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: result.message || 'Something went wrong!',
                });
            }
        } catch (error) {
            console.error("Request failed", error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Something went wrong while adding the product.',
            });
        }
    } else {
        console.log("Form validation failed");
    }
}

        

    </script>
    
    <%- include("../../views/partials/admin/footer") %>